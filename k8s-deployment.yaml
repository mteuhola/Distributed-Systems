apiVersion: v1
kind: Namespace
metadata:
  name: app-namespace

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: app-namespace
spec:
  serviceName: "mongodb"
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "root"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "rootpassword"
        - name: MONGO_INITDB_DATABASE
          value: "admin"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: app-namespace
spec:
  clusterIP: None
  ports:
  - port: 27017
  selector:
    app: mongodb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  namespace: app-namespace
  labels:
    app.kubernetes.io/name: flask-app
    release: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flask-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flask-app
    spec:
      containers:
      - name: flask-app
        image: epelix/flask-app:latest
        ports:
            - containerPort: 5000
        resources:
          requests:
            cpu: "250m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app
  namespace: app-namespace
spec:
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grpc-server
  namespace: app-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpc-server
  template:
    metadata:
      labels:
        app: grpc-server
    spec:
      containers:
      - name: grpc-server
        image: epelix/grpc-server:latest
        ports:
        - containerPort: 50051
---
apiVersion: v1
kind: Service
metadata:
  name: grpc-server
  namespace: app-namespace
spec:
  ports:
  - port: 50051
    targetPort: 50051
  clusterIP:
  type: ClusterIP
  selector:
    app: grpc-server
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: storage-manager
  namespace: app-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: storage-manager
  template:
    metadata:
      labels:
        app: storage-manager
    spec:
      containers:
      - name: storage-manager
        image: epelix/storage-manager:latest
        ports:
        - containerPort: 50052

---
apiVersion: v1
kind: Service
metadata:
  name: storage-manager
  namespace: app-namespace
spec:
  ports:
  - port: 50052
    targetPort: 50052
  selector:
    app: storage-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: app-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
      - name: client
        image: epelix/client:latest
        ports:
        - containerPort: 8000

---
apiVersion: v1
kind: Service
metadata:
  name: client
  namespace: app-namespace
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: client
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grpc-recovery-client
  namespace: app-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpc-recovery-client
  template:
    metadata:
      labels:
        app: grpc-recovery-client
    spec:
      containers:
      - name: grpc-recovery-client
        image: epelix/recovery-client:latest
        env:
        - name: RECOVERY_SERVICE_HOST
          value: "storage-manager:50052"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  namespace: app-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
        image: mongo-express
        env:
        - name: ME_CONFIG_BASICAUTH
          value: "false"
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          value: "root"
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          value: "rootpassword"
        - name: ME_CONFIG_MONGODB_SERVER
          value: "mongodb"
        ports:
        - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express
  namespace: app-namespace
spec:
  selector:
    app: mongo-express
  ports:
    - port: 8081
      targetPort: 8081
      nodePort: 30001
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafdrop
  namespace: app-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafdrop
  template:
    metadata:
      labels:
        app: kafdrop
    spec:
      containers:
      - name: kafdrop
        image: obsidiandynamics/kafdrop
        ports:
        - containerPort: 9000
        env:
        - name: KAFKA_BROKERCONNECT
          value: "kafka:9092"
---
apiVersion: v1
kind: Service
metadata:
  name: kafdrop
  namespace: app-namespace
spec:
  selector:
    app: kafdrop
  ports:
    - port: 9000
      targetPort: 9000
      nodePort: 30002
  type: NodePort
